{
p = c(p, p[1])
M.diff = diff(base.M[p, ])
dists = apply(M.diff, 1, function(x)x[1]^2 + x[2]^2)
1/sum(dists)
}
ga1 = GAPerm(dist.FUN, n, popSize = 100, mutRate = 0.3)
ga1$evolve(100)
plot(ga1)
plot(xp, yp, type = 'n', xlab = '', ylab = '', main = 'Best Tour')
res = ga1$bestIndividual()
res = c(res, res[1])
i = 1:n
xi = base.M[res[i], 1]
yi = base.M[res[i], 2]
xf = base.M[res[i + 1], 1]
yf = base.M[res[i + 1], 2]
arrows(xi, yi, xf, yf, col = 'red', angle = 10)
text(base.M[res, 1], base.M[res, 2], 1:n, cex = 0.9, col = 'gray20')
par(op)
n<- 10000 # total simulation effort
ess_old<- matrix(0, n, 1)
ess_cbm<- matrix(0, n, 1)
ess_lcbm<- matrix(0, n, 1)
ess_lcbm_low<- matrix(0, n, 1)
#### simulation study
x = rep(0, n)
x[1] = 3     #this is just a starting value, which I've set arbitrarily to 3
for(i in 2:n){
currentx = x[i-1]
#proposedx = currentx + rnorm(1,mean=0,sd=1)
proposedx = rexp(1, rate = 0.5) # geometric ergodicity
A = target(proposedx)/target(currentx)
if(runif(1)<A){
x[i] = proposedx       # accept move with probabily min(1,A)
} else {
x[i] = currentx        # otherwise "reject" move, and stay where we are
}
}
for(i in 1:n){
if(i > 10){
ess_old[i]<- ess(x[1:i])
ess_cbm[i]<- (sd(x[1:i])/cbm(x[1:i]))^2
ess_lcbm[i]<- (sd(x[1:i])/lcbm(x[1:i]))^2
ess_lcbm_low[i]<- (sd(x[1:i])/lcbm_low(x[1:i]))^2
}
}
# ess plot
ess_plot<- data.frame(iterations = seq(1:n), classic_ESS = ess_old, ESS_CBM = ess_cbm, ESS_LCBM = ess_lcbm)
ess_plot_long<- melt(ess_plot, id="iterations")
colnames(ess_plot_long)<- c("iterations", "method", "ESS")
ggplot(ess_plot_long, aes(x=iterations, y=ESS, colour=method)) + geom_line() + ggtitle("ESS calculations comparison")
ess_plot<- data.frame(iterations = seq(1:n), classic_ESS = ess_old, ESS_CBM = ess_cbm, ESS_LCBM = ess_lcbm)
ess_plot_long<- melt(ess_plot, id="iterations")
colnames(ess_plot_long)<- c("iterations", "method", "ESS")
ggplot(ess_plot_long, aes(x=iterations, y=ESS, colour=method))
+ geom_line() + ggtitle("ESS calculations comparison")
+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ess_plot<- data.frame(iterations = seq(1:n), classic_ESS = ess_old, ESS_CBM = ess_cbm, ESS_LCBM = ess_lcbm)
ess_plot_long<- melt(ess_plot, id="iterations")
colnames(ess_plot_long)<- c("iterations", "method", "ESS")
ggplot(ess_plot_long, aes(x=iterations, y=ESS, colour=method))
ggplot(ess_plot_long, aes(x=iterations, y=ESS, colour=method)) + geom_line() + ggtitle("ESS calculations comparison") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
#### batch means estimator
cbm<- function(x){
n= length(x)
b= floor(sqrt(n))
a= floor(n/b)
y = sapply(1:a, function(k) return(mean(x[((k - 1) * b + 1):(k * b)])))
mu.hat = mean(y)
var.hat = b * sum((y - mu.hat)^2)/(a - 1)
se = sqrt(var.hat/n)
return(se)
}
lcbm<- function(x){
bench<- 2^seq(0, 10)
n= length(x)
b= 2^min(which(sqrt(n)<=bench)-1)
a= floor(n/b)
y = sapply(1:a, function(k) return(mean(x[((k - 1) * b + 1):(k * b)])))
mu.hat = mean(y)
var.hat = b * sum((y - mu.hat)^2)/(a - 1)
se = sqrt(var.hat/n)
return(se)
}
lcbm_low<- function(x){
bench<- 2^seq(0, 10)
n= length(x)
b= 2^max(which(sqrt(n)>=bench)-1)
a= floor(n/b)
y = sapply(1:a, function(k) return(mean(x[((k - 1) * b + 1):(k * b)])))
mu.hat = mean(y)
var.hat = b * sum((y - mu.hat)^2)/(a - 1)
se = sqrt(var.hat/n)
return(se)
}
#### target function
target = function(x){
if(x<0){
return(0)}
else {
return( exp(-x))
}
}
#### basic settings
n<- 50000 # total simulation effort
ess_old<- matrix(0, n, 1)
ess_cbm<- matrix(0, n, 1)
ess_lcbm<- matrix(0, n, 1)
ess_lcbm_low<- matrix(0, n, 1)
#### simulation study
x = rep(0, n)
x[1] = 3     #this is just a starting value, which I've set arbitrarily to 3
for(i in 2:n){
currentx = x[i-1]
#proposedx = currentx + rnorm(1,mean=0,sd=1)
proposedx = rexp(1, rate = 0.5) # geometric ergodicity
A = target(proposedx)/target(currentx)
if(runif(1)<A){
x[i] = proposedx       # accept move with probabily min(1,A)
} else {
x[i] = currentx        # otherwise "reject" move, and stay where we are
}
}
for(i in 1:n){
if(i > 10){
ess_old[i]<- ess(x[1:i])
ess_cbm[i]<- (sd(x[1:i])/cbm(x[1:i]))^2
ess_lcbm[i]<- (sd(x[1:i])/lcbm(x[1:i]))^2
ess_lcbm_low[i]<- (sd(x[1:i])/lcbm_low(x[1:i]))^2
}
}
# ess plot
ess_plot<- data.frame(iterations = seq(1:n), classic_ESS = ess_old, ESS_CBM = ess_cbm, ESS_LCBM = ess_lcbm)
ess_plot_long<- melt(ess_plot, id="iterations")
colnames(ess_plot_long)<- c("iterations", "method", "ESS")
ggplot(ess_plot_long, aes(x=iterations, y=ESS, colour=method)) + geom_line() + ggtitle("ESS calculations comparison") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ess_lcbm[:10]
ess_lcbm[1:10]
ess_lcbm[1:100]
ggplot(ess_plot_long, aes(x=iterations, y=ESS, colour=method)) + geom_line() + ggtitle("Comparison of ESS calculations") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
#### basic settings
n<- 10000 # total simulation effort
ess_old<- matrix(0, n, 1)
ess_cbm<- matrix(0, n, 1)
ess_lcbm<- matrix(0, n, 1)
ess_lcbm_low<- matrix(0, n, 1)
#### simulation study
x = rep(0, n)
x[1] = 3     #this is just a starting value, which I've set arbitrarily to 3
for(i in 2:n){
currentx = x[i-1]
#proposedx = currentx + rnorm(1,mean=0,sd=1)
proposedx = rexp(1, rate = 0.5) # geometric ergodicity
A = target(proposedx)/target(currentx)
if(runif(1)<A){
x[i] = proposedx       # accept move with probabily min(1,A)
} else {
x[i] = currentx        # otherwise "reject" move, and stay where we are
}
}
for(i in 1:n){
if(i > 10){
ess_old[i]<- ess(x[1:i])
ess_cbm[i]<- (sd(x[1:i])/cbm(x[1:i]))^2
ess_lcbm[i]<- (sd(x[1:i])/lcbm(x[1:i]))^2
ess_lcbm_low[i]<- (sd(x[1:i])/lcbm_low(x[1:i]))^2
}
}
# ess plot
ess_plot<- data.frame(iterations = seq(1:n), classic_ESS = ess_old, ESS_CBM = ess_cbm, ESS_LCBM = ess_lcbm)
ess_plot_long<- melt(ess_plot, id="iterations")
colnames(ess_plot_long)<- c("iterations", "method", "ESS")
ggplot(ess_plot_long, aes(x=iterations, y=ESS, colour=method)) + geom_line() + ggtitle("Comparison of ESS calculations") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
(421-347)/sqrt(122^2/35 + 65^2/50)
(421-347)/sqrt(122^2/35 + 65^2/50)
library(mcmcse)
lambda<- 0.5
eps<- 0.05
n<- 0
X<- 1
while(1){
n<- n+1
x<- rexp(1, lambda)
a<- dexp(x, 1) * dexp(X[n], lambda) / (dexp(x, lambda) * dexp(X[n], 1))
r<- runif(1)
x<- X[n]*(a < r)+x*(a > r)
X<- cbind(X, x)
if(n > 100){
width<- 2*1.96*mcse(X)$se
if(width < eps){
break
}
}
}
runX<- array(0, n+1)
up<- array(0, n+1)
down<- array(0, n+1)
width<- array(0, n+1)
for(i in 10:(n+1)){
runX[i]<- mean(X[1:i])
up[i]<- mean(X[1:i])+1.96*sd(X[1:i])/sqrt(i)
down[i]<- mean(X[1:i])-1.96*sd(X[1:i])/sqrt(i)
width[i]<- 2*1.96*mcse(X[1:i])$se
}
# par(mfrow=c(2, 1))
plot(seq(1, n+1, 1), runX, type = "l", main = "Running Mean plot", ylab = "mean", xlab = "iteration")
abline(h = 1, col = 2)
lines(seq(1, n+1, 1), up, lty = 2, col = 2)
lines(seq(1, n+1, 1), down, lty = 2, col = 2)
plot(seq(1, n+1, 1), width, type = "l", main = "Confidence Interval width", ylab = "width", xlab = "iteration")
abline(h = eps, col = 2)
plot(seq(1, n+1, 1), runX, type = "l", main = "Running Mean plot", ylab = "mean", xlab = "iteration")
abline(h = 1, col = 2)
lines(seq(1, n+1, 1), up, lty = 2, col = 2)
lines(seq(1, n+1, 1), down, lty = 2, col = 2)
plot(seq(1, n+1, 1), runX, type = "l", main = "Running Mean plot", ylab = "mean", xlab = "iteration")
abline(h = 1, col = 2)
plot(seq(1, n+1, 1), runX, type = "l", main = "Running Mean plot", ylab = "mean", xlab = "iteration")
lambda<- 0.5
eps<- 0.05
n<- 0
X<- 1
while(1){
n<- n+1
x<- rexp(1, lambda)
a<- dexp(x, 1) * dexp(X[n], lambda) / (dexp(x, lambda) * dexp(X[n], 1))
r<- runif(1)
x<- X[n]*(a < r)+x*(a > r)
X<- cbind(X, x)
if(n > 100){
width<- 2*1.96*mcse(X)$se
if(width < eps){
break
}
}
}
runX<- array(0, n+1)
up<- array(0, n+1)
down<- array(0, n+1)
width<- array(0, n+1)
for(i in 10:(n+1)){
runX[i]<- mean(X[1:i])
up[i]<- mean(X[1:i])+1.96*sd(X[1:i])/sqrt(i)
down[i]<- mean(X[1:i])-1.96*sd(X[1:i])/sqrt(i)
width[i]<- 2*1.96*mcse(X[1:i])$se
}
# par(mfrow=c(2, 1))
plot(seq(1, n+1, 1), runX, type = "l", main = "Running Mean plot", ylab = "mean", xlab = "iteration")
lambda<- 0.5
eps<- 0.05
n<- 0
X<- 1
while(1){
n<- n+1
x<- rexp(1, lambda)
a<- dexp(x, 1) * dexp(X[n], lambda) / (dexp(x, lambda) * dexp(X[n], 1))
r<- runif(1)
x<- X[n]*(a < r)+x*(a > r)
X<- cbind(X, x)
if(n > 100){
width<- 2*1.96*mcse(X)$se
if(width < eps){
break
}
}
}
runX<- array(0, n+1)
up<- array(0, n+1)
down<- array(0, n+1)
width<- array(0, n+1)
for(i in 10:(n+1)){
runX[i]<- mean(X[1:i])
up[i]<- mean(X[1:i])+1.96*sd(X[1:i])/sqrt(i)
down[i]<- mean(X[1:i])-1.96*sd(X[1:i])/sqrt(i)
width[i]<- 2*1.96*mcse(X[1:i])$se
}
# par(mfrow=c(2, 1))
plot(seq(1, n+1, 1), runX, type = "l", main = "Running Mean plot", ylab = "mean", xlab = "iteration")
library(mcmcse)
lambda<- 0.5
eps<- 0.05
n<- 0
X<- 1
while(1){
n<- n+1
x<- rexp(1, lambda)
a<- dexp(x, 1) * dexp(X[n], lambda) / (dexp(x, lambda) * dexp(X[n], 1))
r<- runif(1)
x<- X[n]*(a < r)+x*(a > r)
X<- cbind(X, x)
if(n > 100){
width<- 2*1.96*mcse(X)$se
if(width < eps){
break
}
}
}
runX<- array(0, n+1)
up<- array(0, n+1)
down<- array(0, n+1)
width<- array(0, n+1)
for(i in 10:(n+1)){
runX[i]<- mean(X[1:i])
up[i]<- mean(X[1:i])+1.96*sd(X[1:i])/sqrt(i)
down[i]<- mean(X[1:i])-1.96*sd(X[1:i])/sqrt(i)
width[i]<- 2*1.96*mcse(X[1:i])$se
}
# par(mfrow=c(2, 1))
plot(seq(1, n+1, 1), runX, type = "l", main = "Running Mean plot", ylab = "mean", xlab = "iteration")
seq(-5, 5)
setwd("~/Documents/Research/Statistics/BVS/MouseWeights/Rmd")
# requirements
require(MASS)
require(reshape2)
require(lme4)
require(lattice)
set.seed(3)
#### parameter settings ####
days<- c(365,395,456,517,578,639,700,760,821,882,943,1004,1065,1125,1186)
W<- matrix(0, nrow=length(days), ncol=2)
W[,1]<- 1
W[,2]<- days/365 - 1 # standardize
Z<- W
X<- matrix(W[,2], ncol=1)
idmatrix<- diag(length(days))
#### prior settings ####
d1 = 75.95
d2 = 871.47
d3 = matrix(c(45.50, -5.75), ncol=1)
d4_inv = matrix(c(0.04, -0.02, -0.02, 0.06), nrow=2, ncol=2)
#### initial values ####
sigma2<- 5.06
lambdaD<- 1/((9.065+14.261)/2)
alpha<- matrix(c(45.50, -5.75), ncol=1)
#### generate control grp ####
n_contrl<- 2266
y_contrl<- matrix(0, nrow=n_contrl, ncol=length(days))
for(i in 1:n_contrl){
y_contrl[i,]<- W%*%alpha +
Z%*%matrix(mvrnorm(1, matrix(0, nrow=2, ncol=1), diag(2)/rgamma(1, d1, d2)), ncol=1) +
matrix(mvrnorm(1, matrix(0, nrow=length(days), ncol=1), sigma2*idmatrix), ncol=1)
}
colnames(y_contrl)<- days
contrl_grp<- as.data.frame(y_contrl)
contrl_grp$id<- as.factor(seq(1, n_contrl))
contrl_grp$diet<- as.factor(99)
## convert to long format
contrl_grp<- melt(contrl_grp, id.vars = c('id', 'diet'), variable.name  = 'days', value.name = 'weight')
contrl_grp<- contrl_grp[order(contrl_grp$id, contrl_grp$days), ]
contrl_grp$days<- as.numeric(as.character(contrl_grp$days))
contrl_grp = contrl_grp[, c("days", "id", 'diet', 'weight')]
set.seed(3)
simu_grp<- contrl_grp
## add Beta params to modify Alpha
for(beta in seq(-5, 5)){
## simulate data
n_trt<- 1000
y_trt<- matrix(0, nrow=n_trt, ncol=length(days))
for(i in 1:n_trt){
y_trt[i,]<- W%*%alpha + X*beta +
Z%*%matrix(mvrnorm(1, matrix(0, nrow=2, ncol=1), diag(2)/rgamma(1, d1, d2)), ncol=1) +
matrix(mvrnorm(1, matrix(0, nrow=length(days), ncol=1), sigma2*idmatrix), ncol=1)
}
colnames(y_trt)<- days
trt_grp<- as.data.frame(y_trt)
trt_grp$id<- as.factor(seq(n_contrl+1, n_contrl+n_trt))
trt_grp$diet<- as.factor(1)
## convert to long format
trt_grp<- melt(trt_grp, id.vars = c('id', 'diet'), variable.name  = 'days', value.name = 'weight')
trt_grp<- trt_grp[order(trt_grp$id, trt_grp$days), ]
trt_grp$days<- as.numeric(as.character(trt_grp$days))
trt_grp = trt_grp[, c("days", "id", 'diet', 'weight')]
simu_grp<- rbind(simu_grp, trt_grp)
}
simu_grp
head(simu_grp)
tail(simu_grp)
set.seed(3)
#### parameter settings ####
days<- c(365,395,456,517,578,639,700,760,821,882,943,1004,1065,1125,1186)
W<- matrix(0, nrow=length(days), ncol=2)
W[,1]<- 1
W[,2]<- days/365 - 1 # standardize
Z<- W
X<- matrix(W[,2], ncol=1)
idmatrix<- diag(length(days))
#### prior settings ####
d1 = 75.95
d2 = 871.47
d3 = matrix(c(45.50, -5.75), ncol=1)
d4_inv = matrix(c(0.04, -0.02, -0.02, 0.06), nrow=2, ncol=2)
#### initial values ####
sigma2<- 5.06
lambdaD<- 1/((9.065+14.261)/2)
alpha<- matrix(c(45.50, -5.75), ncol=1)
#### generate control grp ####
n_contrl<- 2266
y_contrl<- matrix(0, nrow=n_contrl, ncol=length(days))
for(i in 1:n_contrl){
y_contrl[i,]<- W%*%alpha +
Z%*%matrix(mvrnorm(1, matrix(0, nrow=2, ncol=1), diag(2)/rgamma(1, d1, d2)), ncol=1) +
matrix(mvrnorm(1, matrix(0, nrow=length(days), ncol=1), sigma2*idmatrix), ncol=1)
}
colnames(y_contrl)<- days
contrl_grp<- as.data.frame(y_contrl)
contrl_grp$id<- as.factor(seq(1, n_contrl))
contrl_grp$diet<- as.factor(99)
## convert to long format
contrl_grp<- melt(contrl_grp, id.vars = c('id', 'diet'), variable.name  = 'days', value.name = 'weight')
contrl_grp<- contrl_grp[order(contrl_grp$id, contrl_grp$days), ]
contrl_grp$days<- as.numeric(as.character(contrl_grp$days))
contrl_grp = contrl_grp[, c("days", "id", 'diet', 'weight')]
set.seed(3)
simu_grp<- contrl_grp
id_idx<- n_conctrl
diet_idx<- 1
## add Beta params to modify Alpha
for(beta in seq(-5, 5)){
## simulate data
n_trt<- 1000
y_trt<- matrix(0, nrow=n_trt, ncol=length(days))
for(i in 1:n_trt){
y_trt[i,]<- W%*%alpha + X*beta +
Z%*%matrix(mvrnorm(1, matrix(0, nrow=2, ncol=1), diag(2)/rgamma(1, d1, d2)), ncol=1) +
matrix(mvrnorm(1, matrix(0, nrow=length(days), ncol=1), sigma2*idmatrix), ncol=1)
}
colnames(y_trt)<- days
trt_grp<- as.data.frame(y_trt)
trt_grp$id<- as.factor(seq(id_idx+1, id_idx+n_trt))
trt_grp$diet<- as.factor(diet_idx)
id_idx = id_idx + n_trt
diet_idx = diet_idx + 1
## convert to long format
trt_grp<- melt(trt_grp, id.vars = c('id', 'diet'), variable.name  = 'days', value.name = 'weight')
trt_grp<- trt_grp[order(trt_grp$id, trt_grp$days), ]
trt_grp$days<- as.numeric(as.character(trt_grp$days))
trt_grp = trt_grp[, c("days", "id", 'diet', 'weight')]
simu_grp<- rbind(simu_grp, trt_grp)
}
## save to file
write.table(simu_grp, "../simu_grp.txt", quote = FALSE, row.names=FALSE)
n_contrl
set.seed(3)
#### parameter settings ####
days<- c(365,395,456,517,578,639,700,760,821,882,943,1004,1065,1125,1186)
W<- matrix(0, nrow=length(days), ncol=2)
W[,1]<- 1
W[,2]<- days/365 - 1 # standardize
Z<- W
X<- matrix(W[,2], ncol=1)
idmatrix<- diag(length(days))
#### prior settings ####
d1 = 75.95
d2 = 871.47
d3 = matrix(c(45.50, -5.75), ncol=1)
d4_inv = matrix(c(0.04, -0.02, -0.02, 0.06), nrow=2, ncol=2)
#### initial values ####
sigma2<- 5.06
lambdaD<- 1/((9.065+14.261)/2)
alpha<- matrix(c(45.50, -5.75), ncol=1)
#### generate control grp ####
n_contrl<- 2266
y_contrl<- matrix(0, nrow=n_contrl, ncol=length(days))
for(i in 1:n_contrl){
y_contrl[i,]<- W%*%alpha +
Z%*%matrix(mvrnorm(1, matrix(0, nrow=2, ncol=1), diag(2)/rgamma(1, d1, d2)), ncol=1) +
matrix(mvrnorm(1, matrix(0, nrow=length(days), ncol=1), sigma2*idmatrix), ncol=1)
}
colnames(y_contrl)<- days
contrl_grp<- as.data.frame(y_contrl)
contrl_grp$id<- as.factor(seq(1, n_contrl))
contrl_grp$diet<- as.factor(99)
## convert to long format
contrl_grp<- melt(contrl_grp, id.vars = c('id', 'diet'), variable.name  = 'days', value.name = 'weight')
contrl_grp<- contrl_grp[order(contrl_grp$id, contrl_grp$days), ]
contrl_grp$days<- as.numeric(as.character(contrl_grp$days))
contrl_grp = contrl_grp[, c("days", "id", 'diet', 'weight')]
set.seed(3)
simu_grp<- contrl_grp
id_idx<- n_contrl
diet_idx<- 1
## add Beta params to modify Alpha
for(beta in seq(-5, 5)){
## simulate data
n_trt<- 1000
y_trt<- matrix(0, nrow=n_trt, ncol=length(days))
for(i in 1:n_trt){
y_trt[i,]<- W%*%alpha + X*beta +
Z%*%matrix(mvrnorm(1, matrix(0, nrow=2, ncol=1), diag(2)/rgamma(1, d1, d2)), ncol=1) +
matrix(mvrnorm(1, matrix(0, nrow=length(days), ncol=1), sigma2*idmatrix), ncol=1)
}
colnames(y_trt)<- days
trt_grp<- as.data.frame(y_trt)
trt_grp$id<- as.factor(seq(id_idx+1, id_idx+n_trt))
trt_grp$diet<- as.factor(diet_idx)
id_idx = id_idx + n_trt
diet_idx = diet_idx + 1
## convert to long format
trt_grp<- melt(trt_grp, id.vars = c('id', 'diet'), variable.name  = 'days', value.name = 'weight')
trt_grp<- trt_grp[order(trt_grp$id, trt_grp$days), ]
trt_grp$days<- as.numeric(as.character(trt_grp$days))
trt_grp = trt_grp[, c("days", "id", 'diet', 'weight')]
simu_grp<- rbind(simu_grp, trt_grp)
}
## save to file
write.table(simu_grp, "../simu_grp.txt", quote = FALSE, row.names=FALSE)
